using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Given an array of strings and a separate query array of strings, tell how many times each query string appears in the first array.
    static int[] matchingStrings(string[] strings, string[] queries) {
        /*
        Brute-force, horribly inefficient solution that I'm not even going to try.
        int[] ans = new int[queries.Length];
        // New 'int' objects are initialized at 0, right?
        int itr = 0;
        foreach (string q in queries)
        {
            foreach (string s in strings)
            {
                if (String.Compare(q, s) == 0) // match found!
                {
                    ans[itr] += 1;
                }
            }
            itr++;
        }
        return ans;
        */
        // Use a dictionary <string, int>
        // for each s in strings:
        //  If string (TString) is not already in the dictionary, add it.
        //  while adding/reading it, increment the int (TValue).
        
        // Then, for each of the query strings, check for that string in the dictionary
        // if present, then add the (TValue) to the ans array
        Dictionary<string, int> d = new Dictionary<string, int>();
        foreach (string s in strings)
        {
            if (!d.ContainsKey(s))
            {
                d.Add(s, 1);
            }
            else
            { // increment the count for that string. 
                d[s] += 1;
            }
        } /*
        Console.WriteLine("Here is the dictionary: ");
        foreach (KeyValuePair<string, int> entry in d)
        {
            Console.WriteLine("String: {0} Count: {1}", entry.Key, entry.Value);
        } */
        // now run the queries against the dictionary. Place the (TValue) into the answer array each time ContainsKey returns true.
        int[] ans = new int[queries.Length];
        int loc = 0;
        foreach (string q in queries)
        {
            //Console.WriteLine("Currently checking the query " + q);
            if (d.ContainsKey(q))
            {
                ans[loc++] = d[q];
                //Console.WriteLine("For query: {0}, the count is: {1}", q, d[q]);
            }
            else
            {
                ans[loc++] = 0;
            }
        }
        return ans;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int stringsCount = Convert.ToInt32(Console.ReadLine());

        string[] strings = new string [stringsCount];

        for (int i = 0; i < stringsCount; i++) {
            string stringsItem = Console.ReadLine();
            strings[i] = stringsItem;
        }

        int queriesCount = Convert.ToInt32(Console.ReadLine());

        string[] queries = new string [queriesCount];

        for (int i = 0; i < queriesCount; i++) {
            string queriesItem = Console.ReadLine();
            queries[i] = queriesItem;
        }

        int[] res = matchingStrings(strings, queries);

        textWriter.WriteLine(string.Join("\n", res));

        textWriter.Flush();
        textWriter.Close();
    }
}
