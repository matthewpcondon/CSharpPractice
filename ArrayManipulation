using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the arrayManipulation function below.
    static long arrayManipulation(int n, int[][] queries) {
        // get the highest value from the array after operations.
        // only record the slopes.
        // that is, only record when to increase by k and when to decrease by k
        // after b, subtract by k
        // use only a 1-d array.
        long[] slopes = new long[n];
        int m = queries.Length;
        int a, b, k;
        for (int i = 0; i < m; i++)
        {
            a = queries[i][0] - 1;
            b = queries[i][1] - 1;
            long k = (long) queries[i][2];
            slopes[a] = k;
            slopes[b] = -k;
        }
        long answer = 0l;
        foreach(long l in slopes)
        {
            answer += l;
        }
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nm = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nm[0]);

        int m = Convert.ToInt32(nm[1]);

        int[][] queries = new int[m][];

        for (int i = 0; i < m; i++) {
            queries[i] = Array.ConvertAll(Console.ReadLine().Split(' '), queriesTemp => Convert.ToInt32(queriesTemp));
        }

        long result = arrayManipulation(n, queries);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
